{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport DOMAIN from \"../Endpoints/Domain\";\nimport { Picker } from \"@react-native-picker/picker\";\nimport createAlert, { createOKAlert } from \"../Components/General/Alert\";\nimport colours from \"../ColourScheme/colours\";\nimport SendButton from \"../Components/General/SendButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar capitalise = function capitalise(string) {\n  return string.replace(/^\\w/, function (c) {\n    return c.toUpperCase();\n  });\n};\n\nexport default function ReportScreen(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      options = _useState2[0],\n      setOptions = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      optionsLoading = _useState4[0],\n      setOptionsLoading = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedReportType = _useState6[0],\n      setSelectedReportType = _useState6[1];\n\n  useEffect(function () {\n    if (optionsLoading) {\n      loadOptions();\n    }\n  });\n\n  var loadOptions = function _callee() {\n    var requestString;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            requestString = DOMAIN + \"report/types\";\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(requestString).then(function (res) {\n              return res.json();\n            }).then(function (data) {\n              return setOptions(data);\n            }).catch(function (err) {\n              console.log(err);\n            }));\n\n          case 3:\n            setOptionsLoading(false);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleReport = function _callee2() {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(sendReport(createReport(selectedReportType)).then(props.goBack()));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var createReport = function createReport(option) {\n    return {\n      Latitude: props.currentLocation.coords.latitude,\n      Longitude: props.currentLocation.coords.longitude,\n      ReportType: option\n    };\n  };\n\n  var sendReport = function _callee3(report) {\n    var requestOptions;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            requestOptions = {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(report)\n            };\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(fetch(DOMAIN + \"report/\", requestOptions).then(function () {\n              console.log(\"Report sent to backend\");\n              createOKAlert({\n                title: \"Report sent\",\n                message: \"You reported a \" + report.ReportType\n              });\n            }).catch(function (err) {\n              console.log(err);\n              createAlert({\n                title: \"Cannot connect to backend\",\n                message: \"Attempted to send report\",\n                button: \"Resend\",\n                onPress: function onPress() {\n                  return sendReport(report);\n                }\n              });\n            }));\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.header,\n      children: [_jsx(View, {\n        style: styles.goBack,\n        children: _jsx(Button, {\n          title: \"Cancel\",\n          onPress: props.goBack\n        })\n      }), _jsx(Text, {\n        style: styles.title,\n        children: \"Report\"\n      })]\n    }), _jsxs(View, {\n      style: styles.content,\n      children: [_jsxs(View, {\n        style: styles.pickerContainer,\n        children: [_jsx(Text, {\n          style: styles.inputFieldTitle,\n          children: \"Select what you've found\"\n        }), _jsx(Picker, {\n          selectedValue: selectedReportType,\n          style: {\n            width: \"100%\"\n          },\n          onValueChange: function onValueChange(itemValue, itemIndex) {\n            return setSelectedReportType(itemValue.toLowerCase());\n          },\n          children: options ? options.map(function (option) {\n            return _jsx(Picker.Item, {\n              label: capitalise(option),\n              value: option\n            }, option);\n          }) : null\n        })]\n      }), _jsx(SendButton, {\n        title: \"Report\",\n        onPress: selectedReportType ? function () {\n          return handleReport();\n        } : function () {},\n        colour: selectedReportType ? colours.alert : \"gray\"\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colours.background,\n    alignItems: \"center\"\n  },\n  content: {\n    flex: 1,\n    width: \"100%\",\n    alignItems: \"flex-start\",\n    padding: 10\n  },\n  header: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    padding: 20\n  },\n  goBack: {\n    position: \"absolute\",\n    alignSelf: \"flex-start\"\n  },\n  title: {\n    fontSize: 26,\n    fontWeight: \"normal\"\n  },\n  pickerContainer: {\n    flex: 1,\n    width: \"100%\",\n    paddingHorizontal: 16,\n    paddingTop: 16\n  },\n  inputFieldTitle: {\n    fontSize: 20,\n    fontWeight: \"bold\"\n  },\n  inputField: {\n    height: 100\n  }\n});","map":{"version":3,"sources":["/Users/jakehallam/Documents/GitHub/synoptic-frontend/Screens/ReportScreen.js"],"names":["React","useState","useEffect","DOMAIN","Picker","createAlert","createOKAlert","colours","SendButton","capitalise","string","replace","c","toUpperCase","ReportScreen","props","options","setOptions","optionsLoading","setOptionsLoading","selectedReportType","setSelectedReportType","loadOptions","requestString","fetch","then","res","json","data","catch","err","console","log","handleReport","sendReport","createReport","goBack","option","Latitude","currentLocation","coords","latitude","Longitude","longitude","ReportType","report","requestOptions","method","headers","body","JSON","stringify","title","message","button","onPress","styles","container","header","content","pickerContainer","inputFieldTitle","width","itemValue","itemIndex","toLowerCase","map","alert","StyleSheet","create","flex","backgroundColor","background","alignItems","padding","justifyContent","position","alignSelf","fontSize","fontWeight","paddingHorizontal","paddingTop","inputField","height"],"mappings":"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","sourcesContent":["import { Button, SafeAreaView, StyleSheet, Text, View } from \"react-native\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport DOMAIN from \"../Endpoints/Domain\";\nimport { Picker } from \"@react-native-picker/picker\";\nimport createAlert, { createOKAlert } from \"../Components/General/Alert\";\n\nimport colours from \"../ColourScheme/colours\";\n\nimport SendButton from \"../Components/General/SendButton\";\n\nconst capitalise = (string) => {\n  return string.replace(/^\\w/, (c) => c.toUpperCase());\n};\n\nexport default function ReportScreen(props) {\n  const [options, setOptions] = useState([]);\n  const [optionsLoading, setOptionsLoading] = useState(true);\n  const [selectedReportType, setSelectedReportType] = useState();\n\n  // upon changes to the state\n  useEffect(() => {\n    if (optionsLoading) {\n      loadOptions();\n    }\n  });\n\n  const loadOptions = async () => {\n    //defines request URL\n    var requestString = DOMAIN + \"report/types\";\n    //returns the response from the backend\n    await fetch(requestString)\n      //converts response to JSON format\n      .then((res) => res.json())\n      // appends returned datapoints to the grid array\n      .then((data) => setOptions(data))\n      // logs any errors making call to backend\n      .catch((err) => {\n        console.log(err);\n      });\n    //sets loading state to false\n    setOptionsLoading(false);\n  };\n\n  const handleReport = async () => {\n    // handles creation and sending of report, then returns to the map\n    await sendReport(createReport(selectedReportType)).then(props.goBack());\n  };\n\n  const createReport = (option) => {\n    return {\n      Latitude: props.currentLocation.coords.latitude,\n      Longitude: props.currentLocation.coords.longitude,\n      ReportType: option,\n    };\n  };\n\n  // sends report to backend via a post request\n  const sendReport = async (report) => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(report),\n    };\n    await fetch(DOMAIN + \"report/\", requestOptions)\n      .then(() => {\n        console.log(\"Report sent to backend\");\n        createOKAlert({\n          title: \"Report sent\",\n          message: `You reported a ${report.ReportType}`,\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n        createAlert({\n          title: \"Cannot connect to backend\",\n          message: \"Attempted to send report\",\n          button: \"Resend\",\n          onPress: () => sendReport(report),\n        });\n      });\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* header */}\n      <View style={styles.header}>\n        {/* back button */}\n        <View style={styles.goBack}>\n          <Button title=\"Cancel\" onPress={props.goBack}></Button>\n        </View>\n        <Text style={styles.title}>Report</Text>\n      </View>\n\n      <View style={styles.content}>\n        <View style={styles.pickerContainer}>\n          <Text style={styles.inputFieldTitle}>Select what you've found</Text>\n\n          {/* Report type picker */}\n          <Picker\n            selectedValue={selectedReportType}\n            style={{\n              width: \"100%\",\n            }}\n            onValueChange={(itemValue, itemIndex) =>\n              setSelectedReportType(itemValue.toLowerCase())\n            }\n          >\n            {/* populates items in picker wheel with available values */}\n            {options\n              ? options.map((option) => {\n                  return (\n                    <Picker.Item\n                      key={option}\n                      label={capitalise(option)}\n                      value={option}\n                    />\n                  );\n                })\n              : null}\n          </Picker>\n        </View>\n\n        {/* Button to send form to backend */}\n        <SendButton\n          title={`Report`}\n          onPress={selectedReportType ? () => handleReport() : () => {}}\n          colour={selectedReportType ? colours.alert : \"gray\"}\n        />\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    // backgroundColor: \"#00ff0055\",\n    backgroundColor: colours.background,\n    alignItems: \"center\",\n  },\n  content: {\n    flex: 1,\n    width: \"100%\",\n    alignItems: \"flex-start\",\n    padding: 10,\n  },\n  header: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    padding: 20,\n    // backgroundColor: \"#ff000055\",\n  },\n  goBack: {\n    position: \"absolute\",\n    alignSelf: \"flex-start\",\n  },\n  title: {\n    fontSize: 26,\n    fontWeight: \"normal\",\n  },\n  pickerContainer: {\n    flex: 1,\n    // backgroundColor: \"#00ff0055\",\n    width: \"100%\",\n    paddingHorizontal: 16,\n    paddingTop: 16,\n  },\n  inputFieldTitle: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    // backgroundColor: \"#0000ff55\",\n  },\n  inputField: { height: 100 },\n});\n"]},"metadata":{},"sourceType":"module"}