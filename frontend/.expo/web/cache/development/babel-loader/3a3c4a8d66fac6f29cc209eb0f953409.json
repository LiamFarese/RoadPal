{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport * as Location from \"expo-location\";\nimport MapButton from \"../Components/General/MapButton\";\nimport MapView, { PROVIDER_GOOGLE, Overlay, Marker } from \"react-native-maps\";\nimport createAlert from \"../Components/General/Alert\";\nimport ReportScreen from \"./ReportScreen\";\nimport ReportCard from \"../Components/General/ReportCard\";\nimport DOMAIN from \"../Endpoints/Domain\";\nimport colours from \"../ColourScheme/colours\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar capitalise = function capitalise(string) {\n  return string.replace(/^\\w/, function (c) {\n    return c.toUpperCase();\n  });\n};\n\nexport default function MapScreen() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState({\n    latitude: -10.65,\n    longitude: 142.5,\n    latitudeDelta: 15,\n    longitudeDelta: 15\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      viewRegion = _useState4[0],\n      setViewRegion = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      weatherGrid = _useState6[0],\n      setWeatherGrid = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      peakRainfall = _useState8[0],\n      setPeakRainfall = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      weatherLoading = _useState10[0],\n      setWeatherLoading = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      reportGrid = _useState12[0],\n      setReportGrid = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      reportsLoading = _useState14[0],\n      setReportsLoading = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      modalVisible = _useState16[0],\n      setModalVisible = _useState16[1];\n\n  useEffect(function () {\n    if (weatherLoading) {\n      loadWeatherData(viewRegion);\n    }\n\n    setPeakRainfall(Math.max.apply(Math, _toConsumableArray(weatherGrid.map(function (point) {\n      return point.weight;\n    }))));\n  }, [weatherLoading]);\n  useEffect(function () {\n    if (reportsLoading) {\n      loadReports(viewRegion);\n    }\n  }, [reportsLoading]);\n  useEffect(function () {\n    (function _callee() {\n      var _await$Location$reque, status, location;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status !== \"granted\")) {\n                _context.next = 7;\n                break;\n              }\n\n              console.log(\"Permission to access location was denied\");\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 9:\n              location = _context.sent;\n              setLocation(location);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  });\n\n  var updateData = function updateData() {\n    setWeatherLoading(true);\n    setReportsLoading(true);\n  };\n\n  var loadWeatherData = function _callee2(region) {\n    var requestString;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            requestString = DOMAIN + (\"weather?lat=\" + region.latitude + \"&long=\" + region.longitude + \"&latDelta=\" + region.latitudeDelta + \"&longDelta=\" + region.longitudeDelta);\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch(requestString).then(function (res) {\n              return res.json();\n            }).then(function (data) {\n              return setWeatherGrid(function (grid) {\n                return [].concat(_toConsumableArray(grid), _toConsumableArray(data));\n              });\n            }).catch(function (err) {\n              console.log(err);\n              createAlert({\n                title: \"Cannot connect to backend\",\n                message: \"Attempted to load weather data\",\n                button: \"Try again\",\n                onPress: function onPress() {\n                  return loadWeatherData(region);\n                }\n              });\n            }));\n\n          case 3:\n            setWeatherLoading(false);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var loadReports = function _callee3(region) {\n    var requestString;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            requestString = DOMAIN + (\"report?lat=\" + region.latitude + \"&long=\" + region.longitude + \"&latDelta=\" + region.latitudeDelta + \"&longDelta=\" + region.longitudeDelta);\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(fetch(requestString).then(function (res) {\n              return res.json();\n            }).then(function (data) {\n              return setReportGrid(data);\n            }).catch(function (err) {\n              console.log(err);\n              createAlert({\n                title: \"Cannot connect to backend\",\n                message: \"Attempted to load report data\",\n                button: \"Try again\",\n                onPress: function onPress() {\n                  return loadReports(region);\n                }\n              });\n            }));\n\n          case 3:\n            setReportsLoading(false);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onRegionChange = function onRegionChange(region) {\n    setViewRegion(region);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: {\n        flex: 1,\n        width: \"100%\",\n        backgroundColor: colours.primary,\n        alignItems: \"center\",\n        justifyContent: \"flex-end\",\n        paddingBottom: 6\n      },\n      children: _jsx(Text, {\n        style: {\n          fontSize: 16,\n          fontWeight: \"600\",\n          color: colours.background\n        },\n        children: \"Loading...\"\n      })\n    }), _jsx(Modal, {\n      style: styles.modal,\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      children: _jsx(ReportScreen, {\n        goBack: function goBack() {\n          return setModalVisible(false);\n        },\n        currentLocation: location\n      })\n    }), _jsxs(MapView, {\n      style: {\n        width: \"100%\",\n        height: weatherLoading || reportsLoading ? \"92%\" : \"100%\",\n        justifyContent: \"flex-end\"\n      },\n      provider: PROVIDER_GOOGLE,\n      mapType: \"terrain\",\n      initialRegion: viewRegion,\n      onRegionChangeComplete: onRegionChange,\n      showsUserLocation: true,\n      showsMyLocationButton: true,\n      children: [_jsx(Overlay, {\n        image: \"\",\n        style: [styles.refreshButton, styles.buttonShadow],\n        children: _jsx(Pressable, {\n          onPress: updateData,\n          children: _jsx(MapButton, {\n            iconName: \"reload\",\n            size: 55,\n            color: colours.primary\n          })\n        })\n      }), _jsxs(Overlay, {\n        image: \"\",\n        style: [styles.reportButton, styles.buttonShadow],\n        children: [_jsx(Text, {\n          children: weatherLoading\n        }), _jsx(Pressable, {\n          onPress: function onPress() {\n            return setModalVisible(true);\n          },\n          children: _jsx(MapButton, {\n            iconName: \"flag\",\n            size: 100,\n            color: colours.alert\n          })\n        })]\n      }), weatherGrid.length != 0 ? _jsx(MapView.Heatmap, {\n        points: weatherGrid,\n        opacity: 0.5,\n        radius: 1000 / viewRegion.longitudeDelta,\n        maxIntensity: 12.5 * peakRainfall,\n        gradientSmoothing: 0,\n        heatmapMode: \"POINTS_WEIGHT\",\n        gradient: {\n          colors: [\"#00000000\", \"#03fcd7\", \"#03cffc\", \"#0377fc\", \"#0307fc\"],\n          startPoints: [0.02, 0.3, 0.5, 0.75, 1],\n          colorMapSize: 256\n        }\n      }) : null, reportGrid.map(function (report) {\n        return _jsx(Marker, {\n          coordinate: {\n            latitude: report.Latitude,\n            longitude: report.Longitude\n          },\n          children: _jsx(ReportCard, {\n            title: capitalise(report.ReportType),\n            time: report.StartDate,\n            location: {\n              latitude: report.Latitude,\n              longitude: report.Longitude\n            }\n          })\n        }, report._id);\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\"\n  },\n  map: {},\n  navButton: {\n    alignSelf: \"flex-end\"\n  },\n  reportButton: {\n    alignSelf: \"center\",\n    padding: 40\n  },\n  refreshButton: {\n    position: \"absolute\",\n    left: 10,\n    bottom: 46\n  },\n  buttonShadow: {\n    shadowOpacity: 0.1,\n    shadowColor: \"#000\",\n    shadowRadius: 1,\n    shadowOffset: {\n      width: 0,\n      height: 4\n    }\n  }\n});","map":{"version":3,"sources":["/Users/jakehallam/Documents/GitHub/synoptic-frontend/Screens/MapScreen.js"],"names":["React","useState","useEffect","Location","MapButton","MapView","PROVIDER_GOOGLE","Overlay","Marker","createAlert","ReportScreen","ReportCard","DOMAIN","colours","capitalise","string","replace","c","toUpperCase","MapScreen","location","setLocation","latitude","longitude","latitudeDelta","longitudeDelta","viewRegion","setViewRegion","weatherGrid","setWeatherGrid","peakRainfall","setPeakRainfall","weatherLoading","setWeatherLoading","reportGrid","setReportGrid","reportsLoading","setReportsLoading","modalVisible","setModalVisible","loadWeatherData","Math","max","map","point","weight","loadReports","requestForegroundPermissionsAsync","status","console","log","getCurrentPositionAsync","updateData","region","requestString","fetch","then","res","json","data","grid","catch","err","title","message","button","onPress","onRegionChange","styles","container","flex","width","backgroundColor","primary","alignItems","justifyContent","paddingBottom","fontSize","fontWeight","color","background","modal","height","refreshButton","buttonShadow","reportButton","alert","length","colors","startPoints","colorMapSize","report","Latitude","Longitude","ReportType","StartDate","_id","StyleSheet","create","navButton","alignSelf","padding","position","left","bottom","shadowOpacity","shadowColor","shadowRadius","shadowOffset"],"mappings":"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","sourcesContent":["import { Modal, StyleSheet, Pressable, Text, View } from \"react-native\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport * as Location from \"expo-location\";\nimport MapButton from \"../Components/General/MapButton\";\nimport MapView, { PROVIDER_GOOGLE, Overlay, Marker } from \"react-native-maps\";\nimport createAlert from \"../Components/General/Alert\";\nimport ReportScreen from \"./ReportScreen\";\nimport ReportCard from \"../Components/General/ReportCard\";\nimport DOMAIN from \"../Endpoints/Domain\";\n\n// importing project colour scheme\nimport colours from \"../ColourScheme/colours\";\n\nconst capitalise = (string) => {\n  return string.replace(/^\\w/, (c) => c.toUpperCase());\n};\n\nexport default function MapScreen() {\n  const [location, setLocation] = useState(null);\n  const [viewRegion, setViewRegion] = useState({\n    latitude: -10.65,\n    longitude: 142.5,\n    latitudeDelta: 15,\n    longitudeDelta: 15,\n  });\n\n  //use of hooks to access state of screen\n  const [weatherGrid, setWeatherGrid] = useState([]);\n  const [peakRainfall, setPeakRainfall] = useState(0);\n  const [weatherLoading, setWeatherLoading] = useState(false);\n\n  const [reportGrid, setReportGrid] = useState([]);\n  const [reportsLoading, setReportsLoading] = useState(false);\n\n  const [modalVisible, setModalVisible] = useState(false);\n\n  // upon changes to weatherLoading\n  useEffect(() => {\n    if (weatherLoading) {\n      loadWeatherData(viewRegion);\n    }\n    // set peakRainfall state to the maximum weight of all points in the grid\n    setPeakRainfall(Math.max(...weatherGrid.map((point) => point.weight)));\n  }, [weatherLoading]);\n\n  // upon changes to reportsLoading\n  useEffect(() => {\n    if (reportsLoading) {\n      loadReports(viewRegion);\n    }\n  }, [reportsLoading]);\n\n  // upon initial render\n  useEffect(() => {\n    (async () => {\n      // request location permission from user\n      let { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== \"granted\") {\n        console.log(\"Permission to access location was denied\");\n        return;\n      }\n      // gets current gps location of user\n      let location = await Location.getCurrentPositionAsync({});\n      // updates state with current user location\n      setLocation(location);\n    })();\n  });\n\n  const updateData = () => {\n    setWeatherLoading(true);\n    setReportsLoading(true);\n  };\n\n  const loadWeatherData = async (region) => {\n    //encodes regional parameters in URL\n    var requestString =\n      DOMAIN +\n      `weather?lat=${region.latitude}&long=${region.longitude}&latDelta=${region.latitudeDelta}&longDelta=${region.longitudeDelta}`;\n    //returns the response from the backend\n    await fetch(requestString)\n      //converts response to JSON format\n      .then((res) => res.json())\n      // appends returned datapoints to the grid array\n      .then((data) => setWeatherGrid((grid) => [...grid, ...data]))\n      // logs any errors making call to backend\n      .catch((err) => {\n        console.log(err);\n        createAlert({\n          title: \"Cannot connect to backend\",\n          message: \"Attempted to load weather data\",\n          button: \"Try again\",\n          onPress: () => loadWeatherData(region),\n        });\n      });\n    //sets loading state to false\n    setWeatherLoading(false);\n  };\n\n  const loadReports = async (region) => {\n    //encodes regional parameters in URL\n    var requestString =\n      DOMAIN +\n      `report?lat=${region.latitude}&long=${region.longitude}&latDelta=${region.latitudeDelta}&longDelta=${region.longitudeDelta}`;\n    //returns the response from the backend\n    await fetch(requestString)\n      //converts response to JSON format\n      .then((res) => res.json())\n      // appends returned datapoints to the grid array\n      .then((data) => setReportGrid(data))\n      // logs any errors making call to backend\n      .catch((err) => {\n        console.log(err);\n        createAlert({\n          title: \"Cannot connect to backend\",\n          message: \"Attempted to load report data\",\n          button: \"Try again\",\n          onPress: () => loadReports(region),\n        });\n      });\n    //sets loading state to false\n    setReportsLoading(false);\n  };\n\n  // when user changes the region of the map in view, update the state of viewRegion\n  const onRegionChange = (region) => {\n    setViewRegion(region);\n  };\n\n  return (\n    <View style={styles.container}>\n      {/* loading popout */}\n      <View\n        style={{\n          flex: 1,\n          width: \"100%\",\n          backgroundColor: colours.primary,\n          alignItems: \"center\",\n          justifyContent: \"flex-end\",\n          paddingBottom: 6,\n        }}\n      >\n        <Text\n          style={{ fontSize: 16, fontWeight: \"600\", color: colours.background }}\n        >\n          Loading...\n        </Text>\n      </View>\n      {/* report modal */}\n      <Modal\n        style={styles.modal}\n        animationType=\"slide\"\n        transparent={true}\n        visible={modalVisible}\n      >\n        <ReportScreen\n          goBack={() => setModalVisible(false)}\n          currentLocation={location}\n        ></ReportScreen>\n      </Modal>\n\n      {/* Google Map window */}\n      <MapView\n        style={{\n          width: \"100%\",\n          height: weatherLoading || reportsLoading ? \"92%\" : \"100%\",\n          justifyContent: \"flex-end\",\n        }}\n        provider={PROVIDER_GOOGLE}\n        mapType=\"terrain\"\n        initialRegion={viewRegion}\n        onRegionChangeComplete={onRegionChange}\n        showsUserLocation={true}\n        showsMyLocationButton={true}\n      >\n        {/* Refresh Button - replace with absolute components in view overtop */}\n\n        <Overlay image={\"\"} style={[styles.refreshButton, styles.buttonShadow]}>\n          <Pressable onPress={updateData}>\n            <MapButton iconName=\"reload\" size={55} color={colours.primary} />\n          </Pressable>\n        </Overlay>\n\n        {/* Report button - replace with absolute components in view overtop */}\n        <Overlay image={\"\"} style={[styles.reportButton, styles.buttonShadow]}>\n          <Text>{weatherLoading}</Text>\n          <Pressable onPress={() => setModalVisible(true)}>\n            <MapButton iconName=\"flag\" size={100} color={colours.alert} />\n          </Pressable>\n        </Overlay>\n\n        {/* Heatmap overlay (only rendered if there is at least one datapoint in the grid) */}\n        {weatherGrid.length != 0 ? (\n          <MapView.Heatmap\n            points={weatherGrid}\n            opacity={0.5}\n            radius={1000 / viewRegion.longitudeDelta}\n            maxIntensity={12.5 * peakRainfall} //weights are integers in range 0 - 7 (12.5% increments)\n            gradientSmoothing={0}\n            heatmapMode={\"POINTS_WEIGHT\"} //bases heatmap of the weighting of datapoints\n            gradient={{\n              colors: [\"#00000000\", \"#03fcd7\", \"#03cffc\", \"#0377fc\", \"#0307fc\"],\n              startPoints: [0.02, 0.3, 0.5, 0.75, 1],\n              colorMapSize: 256,\n            }}\n          />\n        ) : null}\n\n        {/* map reports on onto map */}\n        {reportGrid.map((report) => (\n          <Marker\n            key={report._id}\n            coordinate={{\n              latitude: report.Latitude,\n              longitude: report.Longitude,\n            }}\n          >\n            <ReportCard\n              title={capitalise(report.ReportType)}\n              time={report.StartDate}\n              location={{\n                latitude: report.Latitude,\n                longitude: report.Longitude,\n              }}\n            />\n          </Marker>\n        ))}\n      </MapView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  map: {},\n  navButton: {\n    alignSelf: \"flex-end\",\n  },\n  reportButton: {\n    alignSelf: \"center\",\n    padding: 40,\n  },\n  refreshButton: {\n    position: \"absolute\",\n    left: 10,\n    bottom: 46,\n  },\n  buttonShadow: {\n    shadowOpacity: 0.1,\n    shadowColor: \"#000\",\n    shadowRadius: 1,\n    shadowOffset: { width: 0, height: 4 },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}